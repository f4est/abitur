// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            Int      @id @default(autoincrement())
  email         String   @unique
  password      String
  name          String
  role          Role     @default(USER)
  avatarUrl     String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  testResults   TestResult[]
  savedSchools  SavedSchool[]
  reviews       Review[]
  resetCode     String?
  resetCodeExpires DateTime?
}

model School {
  id            Int       @id @default(autoincrement())
  name          String
  description   String?
  address       String
  coordinates   String?
  logoUrl       String?
  websiteUrl    String?
  contacts      String?
  category      String?   // Тип учебного заведения (университет, колледж и т.д.)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Связи
  photos        SchoolPhoto[]
  programs      EducationalProgram[]
  savedByUsers  SavedSchool[]
  reviews       Review[]

  @@map("School")
}

model SchoolPhoto {
  id        Int      @id @default(autoincrement())
  url       String
  schoolId  Int
  createdAt DateTime @default(now())
  school    School   @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  @@map("SchoolPhoto")
}

model EducationalProgram {
  id          Int      @id @default(autoincrement())
  name        String
  code        String?  // Код направления
  description String?
  duration    String?  // Срок обучения
  price       Float?   // Стоимость обучения
  schoolId    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  school      School   @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  examRequirements ExamRequirement[]

  @@map("EducationalProgram")
}

model ExamRequirement {
  id          Int      @id @default(autoincrement())
  name        String   // Название экзамена
  minScore    Int      // Минимальный балл
  programId   Int
  program     EducationalProgram @relation(fields: [programId], references: [id], onDelete: Cascade)

  @@map("ExamRequirement")
}

model TestQuestion {
  id          Int     @id @default(autoincrement())
  question    String
  options     String  // JSON строка с вариантами ответов
  category    String
  weights     String? // JSON строка с весами для результатов по вариантам ответов
}

model TestResult {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  results     String   // JSON строка с результатами теста
  createdAt   DateTime @default(now())
}

model SavedSchool {
  userId    Int
  schoolId  Int
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  school    School  @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@id([userId, schoolId])
}

model Review {
  id          Int      @id @default(autoincrement())
  text        String
  rating      Float
  authorName  String
  source      String?  // Источник отзыва (2GIS и т.д.)
  isExternal  Boolean  @default(false)
  isApproved  Boolean  @default(false)
  schoolId    Int
  userId      Int
  createdAt   DateTime @default(now())
  school      School   @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("Review")
}

enum Role {
  USER
  ADMIN
} 
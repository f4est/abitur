// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            Int      @id @default(autoincrement())
  email         String   @unique
  password      String
  name          String
  role          Role     @default(USER)
  avatarUrl     String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  testResults   TestResult[]
  savedSchools  SavedSchool[]
  reviews       Review[]
  resetCode     String?
  resetCodeExpires DateTime?
}

model School {
  id                  Int       @id @default(autoincrement())
  name                String
  shortDescription    String?   // Краткое описание для списка
  description         String?   // Полное описание
  address             String
  city                String?   // Город
  phoneNumber         String?   // Основной телефон
  email               String?   // Контактный email
  website             String?   // Веб-сайт учебного заведения
  logoUrl             String?   // URL логотипа учебного заведения
  category            String?   // Категория учебного заведения (college, university и т.д.)
  
  // Дополнительные контактные данные
  additionalPhones    String?   // JSON массив с дополнительными телефонами
  faxNumber           String?   // Номер факса
  messengers          String?   // JSON объект с мессенджерами {telegram: "@username", whatsapp: "+7123456789", ...}
  workingHours        String?   // JSON объект с расписанием работы
  socialNetworks      String?   // JSON объект со ссылками на соцсети
  contacts            String?   // JSON строка со структурированными контактами
  
  // Геолокация
  latitude            Float?    // Широта для карты
  longitude           Float?    // Долгота для карты
  
  // Отзывы из внешних источников
  externalReviewsUrl  String?   // URL страницы с отзывами (например, 2GIS)
  externalReviewsSource String?  // Источник отзывов (например, "2GIS")
  externalReviewsId   String?   // ID организации во внешнем источнике
  
  // Контент
  images              String?   // JSON массив с URL изображений
  educationalPrograms String?   // JSON массив с образовательными программами
  
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  // Связи
  photos              SchoolPhoto[]
  programs            EducationalProgram[]
  savedByUsers        SavedSchool[]
  reviews             Review[]

  @@map("School")
}

model SchoolPhoto {
  id          Int      @id @default(autoincrement())
  url         String   // URL фотографии
  description String?  // Описание фотографии
  schoolId    Int
  school      School   @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())

  @@map("SchoolPhoto")
}

model EducationalProgram {
  id          Int      @id @default(autoincrement())
  name        String
  code        String?  // Код специальности
  description String?
  duration    String?  // Например, "4 года", "5 лет"
  price       Float?   // Стоимость обучения
  category    String?  // Например, "Бакалавриат", "Магистратура", "Специалитет"
  schoolId    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  school      School   @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  examRequirements String?  // JSON строка с требованиями к экзаменам

  @@map("EducationalProgram")
}

model TestQuestion {
  id          Int     @id @default(autoincrement())
  question    String
  options     String  // JSON-строка с вариантами ответов в формате [{text: "Текст ответа", value: 5}, ...]
  category    String
  weights     String? // JSON-строка с весами для результатов по вариантам ответов
}

model TestResult {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  results     String   // JSON строка с результатами теста
  createdAt   DateTime @default(now())
}

model SavedSchool {
  userId    Int
  schoolId  Int
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  school    School  @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@id([userId, schoolId])
}

model Review {
  id          Int      @id @default(autoincrement())
  text        String
  rating      Int
  authorName  String?  // Имя автора для внешних отзывов
  source      String?  // Например, "2GIS", "Наш сайт"
  isExternal  Boolean  @default(false)  // Индикатор внешнего отзыва
  isApproved  Boolean  @default(false)  // Модерация отзывов
  schoolId    Int
  userId      Int?
  createdAt   DateTime @default(now())
  school      School   @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("Review")
}

enum Role {
  USER
  ADMIN
} 